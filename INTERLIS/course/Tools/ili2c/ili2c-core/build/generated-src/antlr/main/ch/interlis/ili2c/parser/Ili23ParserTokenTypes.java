// $ANTLR : "interlis23.g" -> "Ili23Parser.java"$

	package ch.interlis.ili2c.parser;
	import ch.interlis.ili2c.metamodel.*;
	import ch.interlis.ili2c.generator.Interlis2Generator;
	import ch.interlis.ili2c.CompilerLogEvent;
	import ch.interlis.ili2c.Ili2cException;
	import java.util.*;
	import ch.ehi.basics.logging.EhiLogger;
	import ch.ehi.basics.settings.Settings;

public interface Ili23ParserTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int LITERAL_INTERLIS = 4;
	int SEMI = 5;
	int LITERAL_CONTRACTED = 6;
	int LITERAL_REFSYSTEM = 7;
	int LITERAL_MODEL = 8;
	int LITERAL_SYMBOLOGY = 9;
	int LITERAL_TYPE = 10;
	int NAME = 11;
	int LPAREN = 12;
	int RPAREN = 13;
	int LITERAL_AT = 14;
	int STRING = 15;
	int LITERAL_VERSION = 16;
	int EXPLANATION = 17;
	int LITERAL_TRANSLATION = 18;
	int LITERAL_OF = 19;
	int LBRACE = 20;
	int RBRACE = 21;
	int EQUALS = 22;
	int LITERAL_IMPORTS = 23;
	int LITERAL_UNQUALIFIED = 24;
	int COMMA = 25;
	int DOT = 26;
	int LITERAL_VIEW = 27;
	int LITERAL_TOPIC = 28;
	int LITERAL_EXTENDS = 29;
	int LITERAL_BASKET = 30;
	int LITERAL_OID = 31;
	int LITERAL_AS = 32;
	int LITERAL_DEPENDS = 33;
	int LITERAL_ON = 34;
	int LITERAL_CLASS = 35;
	int LITERAL_STRUCTURE = 36;
	int LITERAL_NO = 37;
	int LITERAL_ATTRIBUTE = 38;
	int LITERAL_PARAMETER = 39;
	int LITERAL_CONTINUOUS = 40;
	int LITERAL_SUBDIVISION = 41;
	int COLON = 42;
	int COLONEQUALS = 43;
	int LITERAL_MANDATORY = 44;
	int LITERAL_BAG = 45;
	int LITERAL_LIST = 46;
	int LITERAL_ANYSTRUCTURE = 47;
	int LITERAL_RESTRICTION = 48;
	int LITERAL_REFERENCE = 49;
	int LITERAL_TO = 50;
	int LITERAL_ANYCLASS = 51;
	int LITERAL_ASSOCIATION = 52;
	int LITERAL_DERIVED = 53;
	int LITERAL_FROM = 54;
	int LITERAL_CARDINALITY = 55;
	int LITERAL_END = 56;
	int ASSOCIATE = 57;
	int AGGREGATE = 58;
	int COMPOSITE = 59;
	int LITERAL_OR = 60;
	int LCURLY = 61;
	int STAR = 62;
	int DOTDOT = 63;
	int RCURLY = 64;
	int LITERAL_DOMAIN = 65;
	int LITERAL_UNDEFINED = 66;
	int LITERAL_URI = 67;
	int LITERAL_NAME = 68;
	int LITERAL_MTEXT = 69;
	int LITERAL_TEXT = 70;
	int LITERAL_ORDERED = 71;
	int LITERAL_CIRCULAR = 72;
	int LITERAL_ALL = 73;
	int LITERAL_FINAL = 74;
	int HASH = 75;
	int LITERAL_OTHERS = 76;
	int LITERAL_HALIGNMENT = 77;
	int LITERAL_VALIGNMENT = 78;
	int LITERAL_BOOLEAN = 79;
	int LITERAL_NUMERIC = 80;
	int LITERAL_CLOCKWISE = 81;
	int LITERAL_COUNTERCLOCKWISE = 82;
	int LESS = 83;
	int GREATER = 84;
	int LITERAL_PI = 85;
	int LITERAL_LNBASE = 86;
	int LITERAL_FORMAT = 87;
	int LITERAL_BASED = 88;
	int LITERAL_INHERITANCE = 89;
	int SLASH = 90;
	int LITERAL_COORD = 91;
	int LITERAL_ROTATION = 92;
	int POINTSTO = 93;
	int LITERAL_ANY = 94;
	int LITERAL_BLACKBOX = 95;
	int LITERAL_XML = 96;
	int LITERAL_BINARY = 97;
	int AT = 98;
	int GREATERGREATER = 99;
	int LITERAL_DIRECTED = 100;
	int LITERAL_POLYLINE = 101;
	int LITERAL_SURFACE = 102;
	int LITERAL_AREA = 103;
	int LITERAL_VERTEX = 104;
	int LITERAL_WITHOUT = 105;
	int LITERAL_OVERLAPS = 106;
	int LITERAL_LINE = 107;
	int LITERAL_ATTRIBUTES = 108;
	int LITERAL_WITH = 109;
	int LITERAL_ARCS = 110;
	int LITERAL_STRAIGHTS = 111;
	int LITERAL_FORM = 112;
	int LITERAL_UNIT = 113;
	int LITERAL_ABSTRACT = 114;
	int LITERAL_FUNCTION = 115;
	int LITERAL_SIGN = 116;
	int TILDE = 117;
	int LITERAL_OBJECTS = 118;
	int LITERAL_METAOBJECT = 119;
	int LITERAL_CONSTRAINT = 120;
	int LESSEQUAL = 121;
	int GREATEREQUAL = 122;
	int PERCENT = 123;
	int LITERAL_EXISTENCE = 124;
	int LITERAL_REQUIRED = 125;
	int LITERAL_IN = 126;
	int LITERAL_UNIQUE = 127;
	int LITERAL_WHERE = 128;
	int LITERAL_LOCAL = 129;
	int LITERAL_SET = 130;
	int LITERAL_CONSTRAINTS = 131;
	int LITERAL_AND = 132;
	int LITERAL_NOT = 133;
	int LITERAL_DEFINED = 134;
	int EQUALSEQUALS = 135;
	int BANGEQUALS = 136;
	int LESSGREATER = 137;
	int LITERAL_INSPECTION = 138;
	int LITERAL_THIS = 139;
	int LITERAL_THISAREA = 140;
	int LITERAL_THATAREA = 141;
	int LITERAL_PARENT = 142;
	int BACKSLASH = 143;
	int LITERAL_AGGREGATES = 144;
	int LITERAL_FIRST = 145;
	int LITERAL_LAST = 146;
	int LITERAL_OBJECT = 147;
	int LITERAL_ENUMVAL = 148;
	int LITERAL_ENUMTREEVAL = 149;
	int LITERAL_PROJECTION = 150;
	int LITERAL_JOIN = 151;
	int LITERAL_NULL = 152;
	int LITERAL_UNION = 153;
	int LITERAL_AGGREGATION = 154;
	int LITERAL_EQUAL = 155;
	int LITERAL_BASE = 156;
	int LITERAL_EXTENDED = 157;
	int LITERAL_BY = 158;
	int LITERAL_GRAPHIC = 159;
	int LITERAL_ACCORDING = 160;
	int LITERAL_WHEN = 161;
	int LITERAL_DATA = 162;
	int LITERAL_EXTERNAL = 163;
	int LITERAL_TRANSIENT = 164;
	int LITERAL_HIDING = 165;
	int DEC = 166;
	int POSINT = 167;
	int NUMBER = 168;
	int PLUS = 169;
	int MINUS = 170;
	int WS = 171;
	int ILI_METAVALUE = 172;
	int SL_COMMENT = 173;
	int ILI_DOC = 174;
	int ML_COMMENT = 175;
	int LESSMINUS = 176;
	int ESC = 177;
	int DIGIT = 178;
	int LETTER = 179;
	int ILI1_SCALING = 180;
	int SCALING = 181;
	int ILI1_DEC = 182;
	int HEXDIGIT = 183;
	int HEXNUMBER = 184;
	int NUMERICSTUFF = 185;
}
