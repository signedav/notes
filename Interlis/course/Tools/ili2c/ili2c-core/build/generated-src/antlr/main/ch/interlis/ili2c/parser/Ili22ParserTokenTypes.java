// $ANTLR : "interlis22.g" -> "Ili22Parser.java"$

	package ch.interlis.ili2c.parser;
	import ch.interlis.ili2c.metamodel.*;
	import ch.interlis.ili2c.CompilerLogEvent;
	import java.util.*;
	import ch.ehi.basics.logging.EhiLogger;
	import ch.ehi.basics.settings.Settings;

public interface Ili22ParserTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int LITERAL_INTERLIS = 4;
	int SEMI = 5;
	int LITERAL_REFSYSTEM = 6;
	int LITERAL_MODEL = 7;
	int LITERAL_SYMBOLOGY = 8;
	int LITERAL_TYPE = 9;
	int NAME = 10;
	int LPAREN = 11;
	int RPAREN = 12;
	int LITERAL_TRANSLATION = 13;
	int LITERAL_OF = 14;
	int EQUALS = 15;
	int LITERAL_CONTRACT = 16;
	int LITERAL_ISSUED = 17;
	int LITERAL_BY = 18;
	int EXPLANATION = 19;
	int LITERAL_IMPORTS = 20;
	int LITERAL_UNQUALIFIED = 21;
	int COMMA = 22;
	int DOT = 23;
	int LITERAL_VIEW = 24;
	int LITERAL_TOPIC = 25;
	int LITERAL_EXTENDS = 26;
	int LITERAL_OID = 27;
	int LITERAL_AS = 28;
	int LITERAL_DEPENDS = 29;
	int LITERAL_ON = 30;
	int LITERAL_CLASS = 31;
	int LITERAL_STRUCTURE = 32;
	int LITERAL_ATTRIBUTE = 33;
	int LITERAL_PARAMETER = 34;
	int COLON = 35;
	int COLONEQUALS = 36;
	int LITERAL_MANDATORY = 37;
	int LITERAL_BAG = 38;
	int LITERAL_LIST = 39;
	int LITERAL_RESTRICTED = 40;
	int LITERAL_TO = 41;
	int LITERAL_REFERENCE = 42;
	int LITERAL_ANYCLASS = 43;
	int LITERAL_ANYSTRUCTURE = 44;
	int LITERAL_ASSOCIATION = 45;
	int LITERAL_DERIVED = 46;
	int LITERAL_FROM = 47;
	int LITERAL_END = 48;
	int ASSOCIATE = 49;
	int AGGREGATE = 50;
	int COMPOSITE = 51;
	int LCURLY = 52;
	int STAR = 53;
	int DOTDOT = 54;
	int RCURLY = 55;
	int LITERAL_DOMAIN = 56;
	int LITERAL_UNDEFINED = 57;
	int LITERAL_URI = 58;
	int LITERAL_NAME = 59;
	int LITERAL_TEXT = 60;
	int STRING = 61;
	int LITERAL_ORDERED = 62;
	int LITERAL_CIRCULAR = 63;
	int LITERAL_FINAL = 64;
	int HASH = 65;
	int LITERAL_OTHERS = 66;
	int LITERAL_HALIGNMENT = 67;
	int LITERAL_VALIGNMENT = 68;
	int LITERAL_BOOLEAN = 69;
	int LITERAL_NUMERIC = 70;
	int LBRACE = 71;
	int RBRACE = 72;
	int LITERAL_CLOCKWISE = 73;
	int LITERAL_COUNTERCLOCKWISE = 74;
	int LESS = 75;
	int GREATER = 76;
	int LITERAL_PI = 77;
	int LITERAL_LNBASE = 78;
	int STRUCTDEC = 79;
	int LITERAL_COORD = 80;
	int LITERAL_ROTATION = 81;
	int POINTSTO = 82;
	int LITERAL_ANY = 83;
	int LITERAL_BASKET = 84;
	int LITERAL_DIRECTED = 85;
	int LITERAL_POLYLINE = 86;
	int LITERAL_SURFACE = 87;
	int LITERAL_AREA = 88;
	int LITERAL_VERTEX = 89;
	int LITERAL_WITHOUT = 90;
	int LITERAL_OVERLAPS = 91;
	int LITERAL_LINE = 92;
	int LITERAL_ATTRIBUTES = 93;
	int LITERAL_WITH = 94;
	int LITERAL_ARCS = 95;
	int LITERAL_STRAIGHTS = 96;
	int LITERAL_FORM = 97;
	int LITERAL_UNIT = 98;
	int LITERAL_ABSTRACT = 99;
	int LITERAL_FUNCTION = 100;
	int SLASH = 101;
	int LITERAL_CONTINUOUS = 102;
	int LITERAL_SIGN = 103;
	int TILDE = 104;
	int LITERAL_METAOBJECT = 105;
	int LITERAL_CONSTRAINT = 106;
	int LESSEQUAL = 107;
	int GREATEREQUAL = 108;
	int PERCENT = 109;
	int LITERAL_EXISTENCE = 110;
	int LITERAL_REQUIRED = 111;
	int LITERAL_IN = 112;
	int LITERAL_OR = 113;
	int LITERAL_UNIQUE = 114;
	int LITERAL_LOCAL = 115;
	int LITERAL_CONSTRAINTS = 116;
	int LITERAL_AND = 117;
	int LITERAL_NOT = 118;
	int LITERAL_DEFINED = 119;
	int EQUALSEQUALS = 120;
	int BANGEQUALS = 121;
	int LESSGREATER = 122;
	int LITERAL_THIS = 123;
	int LITERAL_THISAREA = 124;
	int LITERAL_THATAREA = 125;
	int LITERAL_PARENT = 126;
	int BACKSLASH = 127;
	int LITERAL_AGGREGATES = 128;
	int LITERAL_FIRST = 129;
	int LITERAL_LAST = 130;
	int LITERAL_OBJECT = 131;
	int LITERAL_PROJECTION = 132;
	int LITERAL_JOIN = 133;
	int LITERAL_NULL = 134;
	int LITERAL_UNION = 135;
	int LITERAL_AGGREGATION = 136;
	int LITERAL_ALL = 137;
	int LITERAL_EQUAL = 138;
	int LITERAL_INSPECTION = 139;
	int LITERAL_BASE = 140;
	int LITERAL_EXTENDED = 141;
	int LITERAL_WHERE = 142;
	int LITERAL_GRAPHIC = 143;
	int LITERAL_BASED = 144;
	int LITERAL_ACCORDING = 145;
	int LITERAL_WHEN = 146;
	int LITERAL_DATA = 147;
	int LITERAL_EXTERNAL = 148;
	int LITERAL_TRANSIENT = 149;
	int DEC = 150;
	int POSINT = 151;
	int NUMBER = 152;
	int PLUS = 153;
	int MINUS = 154;
	int WS = 155;
	int ILI_METAVALUE = 156;
	int SL_COMMENT = 157;
	int ILI_DOC = 158;
	int ML_COMMENT = 159;
	int AT = 160;
	int LESSMINUS = 161;
	int ESC = 162;
	int DIGIT = 163;
	int LETTER = 164;
	int ILI1_SCALING = 165;
	int SCALING = 166;
	int ILI1_DEC = 167;
	int HEXDIGIT = 168;
	int HEXNUMBER = 169;
	int NUMERICSTUFF = 170;
}
