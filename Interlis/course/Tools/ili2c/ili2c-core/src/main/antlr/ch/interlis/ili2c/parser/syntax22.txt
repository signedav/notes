according to refman 2003-05-13

Name = Letter { Letter | Digit | '_' }.
Letter = ( 'A' | .. | 'Z' | 'a' | .. | 'z' ).
Digit = ( '0' | '1' | .. | '9' ).
HexDigit = ( Digit | 'A' | .. | 'F' | 'a' | .. | 'f' ).

String = '"' { <any character except '\' or '"'>
             | '\"'
             | '\\'
             | '\u' HexDigit HexDigit HexDigit HexDigit
             } '"'.

PosNumber = (* Digit *).
Number = [ '+' | '-' ] PosNumber.
Dec = ( Number [ '.' PosNumber ] | Float ).
Float = [ '+' | '-' ] '0.' (('1'|'2'|...|'9') [PosNumber] | (* '0' *))
        Scaling.
Scaling = ( 'e' | 'E' ) Number.
StructDec = Number (* ':' PosNumber *) [ '.' PosNumber ].

Explanation = '//' any character except //  '//'.

!! Line comment; goes until end of line

/* Block comment,
    additional line comment */

INTERLIS2Def = 'INTERLIS' Version-Dec ';'
               { ModelDef }.

ModelDef = [ 'TYPE' | 'REFSYSTEM' | 'SYMBOLOGY' ]
           'MODEL' Model-Name [ '('Language-Name ')' ]
           [ 'TRANSLATION' 'OF' Model-Name ] '='
               { 'CONTRACT' 'ISSUED' 'BY' Issuer-Name [ Explanation ] ';' }
               { 'IMPORTS' [ 'UNQUALIFIED' ] Model-Name 
               { ',' [ 'UNQUALIFIED' ] Model-Name } ';' }
               { MetaDataUseDef
               | UnitDef
               | FunctionDef
               | LineFormTypeDef
               | DomainDef
               | RunTimeParameterDef
               | ClassDef
               | TopicDef }
           'END' Model-Name '.'.

TopicDef = [ 'VIEW' ] 'TOPIC' Topic-Name
               Properties<ABSTRACT,FINAL>
               [ 'EXTENDS' TopicRef] '='
                   [ 'OID' 'AS' OID-DomainRef ]
                   { 'DEPENDS' 'ON' TopicRef { ',' TopicRef } ';' }
                   Definitions
           'END' Topic-Name ';'.

Definitions =  { MetaDataUseDef
               | UnitDef
               | DomainDef
               | ClassDef
               | AssociationDef
               | ConstraintsDef
               | ViewDef
               | GraphicDef }.

TopicRef = [ Model-Name '.' ] Topic-Name.

ClassDef = ( 'CLASS' | 'STRUCTURE' ) Class-Name
               Properties<ABSTRACT,EXTENDED,FINAL>
                   [ 'EXTENDS' StructureRef ] '='
               [ 'ATTRIBUTE' ] { AttributeDef }
               { ConstraintDef }
               [ 'PARAMETER' { ParameterDef } ]
           'END' Class-Name ';'.

ClassRef = [ Model-Name '.' [ Topic-Name'.' ] ] Class-Name.

StructureRef = [ Model-Name '.' [ Topic-Name '.' ] ]
               ( Structure-Class-Name | Class-Name ).

AttributeDef = Attribute-Name Properties<ABSTRACT,EXTENDED,FINAL>
                   ':' AttrTypeDef
                       [ ':=' Factor { ',' Factor } ] ';'.

AttrTypeDef = ('MANDATORY' [ AttrType ]
              | AttrType
              | ( ( 'BAG' | 'LIST' ) [ Cardinality ]
                  'OF' RestrictedStructureRef ) ).

AttrType = ( Type
           | DomainRef
           | ReferenceAttr
           | RestrictedStructureRef ) .

ReferenceAttr = 'REFERENCE' 'TO'
                  Properties<EXTERNAL> RestrictedClassOrAssRef .

RestrictedClassOrAssRef = ( ClassOrAssociationRef | 'ANYCLASS' )
                                [ 'RESTRICTED' 'TO' ClassOrAssociationRef
                                    { ',' ClassOrAssociationRef } ].

ClassOrAssociationRef = ( ClassRef | AssociationRef ).

RestrictedStructureRef = ( StructureRef | 'ANYSTRUCTURE' )
                             [ 'RESTRICTED' 'TO' StructureRef
                                 { ',' StructureRef } ].

AssociationDef = 'ASSOCIATION' [ Association-Name ]
                     Properties<ABSTRACT,EXTENDED,FINAL>
                     [ 'EXTENDS' AssociationRef ]
                     [ 'DERIVED' 'FROM' RenamedViewableRef ] '='
                     { RoleDef }
                     [ 'ATTRIBUTE'] { AttributeDef }
                     { ConstraintDef }
                 'END' [ Association-Name ] ';'.

AssociationRef = [ Model-Name'.' [ Topic-Name'.' ]] Association-Name.

RoleDef = Role-Name Properties<ABSTRACT,EXTENDED,FINAL,ORDERED,EXTERNAL>
              ( '--'|'-<>'|'-<#>' ) [ Cardinality ]
              RestrictedClassOrAssRef
              [ ':=' Role-Factor ] '; '.

Cardinality = '{' ( '*' | PosNumber [ '..' ( PosNumber | '*' ) ] ) '}'.

DomainDef = 'DOMAIN'
                { Domain-Name Properties<ABSTRACT,FINAL>
                    ['EXTENDS' DomainRef ] '='
                ('MANDATORY' [ Type ] | Type ) ';' }.

Type = ( BaseType | LineType ).

DomainRef = [ Model-Name '.' [ Topic-Name '.' ] ] Domain-Name.

BaseType = ( TextType
           | EnumerationType
           | AlignmentType
           | BooleanType
           | NumericType
           | StructuredUnitType
           | CoordinateType
           | OIDType
           | BasketType
           | ClassType ).

Constant = ( 'UNDEFINED'
           | NumericConst
           | TextConst
           | StructUnitConst
           | EnumerationConst ).

TextType = ( 'TEXT' ['*' MaxLength-PosNumber ]
           | 'NAME'
           | 'URI' ).

TextConst = String.

EnumerationType = Enumeration [ 'ORDERED' | 'CIRCULAR' ].

Enumeration = '(' EnumElement { ',' EnumElement } [ ':' 'FINAL' ] 
               | 'FINAL' ')'.

EnumElement = EnumElement-Name { '.' EnumElement-Name } [Sub-Enumeration].

EnumerationConst = '#' ( EnumElement-Name { '.' EnumElement-Name }
                                          [ '.' 'OTHERS' ]
                       | 'OTHERS' ).

AlignmentType = ( 'HALIGNMENT' | 'VALIGNMENT' ).

BooleanType = 'BOOLEAN'.

NumericType = ( Min-Dec '..' Max-Dec | 'NUMERIC' ) [ 'CIRCULAR' ]
              [ '[' UnitRef ']' ]
              [ 'CLOCKWISE' | 'COUNTERCLOCKWISE' | RefSys ].

RefSys = ( '{' RefSys-MetaObjectRef [ '[' Axis-PosNumber ']' ] '}'
         | '<' Coord-DomainRef [ '[' Axis-PosNumber ']' ] '>' ).

DecConst = ( Dec | 'PI' | 'LNBASE' ).

NumericConst = DecConst [ '[' UnitRef ']' ].

StructuredUnitType = Min-StructDec '..' Max-StructDec [ 'CIRCULAR' ]
                     '[' Structured-UnitRef ']'
                     [ 'CLOCKWISE' | 'COUNTERCLOCKWISE' ]
                     [ RefSys ].

StructUnitConst = StructDec [ '[' UnitRef ']' ].

CoordinateType = 'COORD' NumericalType
                     [ ',' NumericalType [ ',' NumericalType ]
                         [ ',' RotationDef ] ].

NumericalType = ( NumericType | StructuredUnitType ).

RotationDef = 'ROTATION' NullAxis-PosNumber '->'
              PiHalfAxis-PosNumber.

OIDType = 'OID' ( 'ANY' | NumericType | TextType ).

BasketType = 'BASKET' Properties<DATA,VIEW,BASE,GRAPHIC>
                 [ 'OF' [ Model-Name '.' ] Topic-Name ].

ClassType = ( 'CLASS'
                  [ 'RESTRICTED' 'TO' ClassOrAssociationRef
                                      { ',' ClassOrAssociationRef } ]
            | 'STRUCTURE'
                  [ 'RESTRICTED' 'TO' StructureRef
                                      { ',' StructureRef } ] ).

LineType = ([ 'DIRECTED' ] 'POLYLINE' | 'SURFACE' | 'AREA' )
           [ LineForm ] [ ControlPoints ] [ IntersectionDef ]
           [ LineAttrDef ].

LineForm = 'WITH' '(' LineFormType {',' LineFormType} ')'.

LineFormType = ( 'STRAIGHTS' | 'ARCS'
               | [ Model-Name '.' ] LineFormType-Name ).

ControlPoints = 'VERTEX' CoordType-DomainRef.

IntersectionDef = 'WITHOUT' 'OVERLAPS' '>' Dec.

LineAttrDef = 'LINE' 'ATTRIBUTES' Structure-Name.

LineFormTypeDef = 'LINE' 'FORM'
                      { LineFormType-Name ':' LineStructure-Name ';' }.

UnitDef = 'UNIT'
              { Unit-Name
                  [ '(' 'ABSTRACT' ')' | '[' UnitShort-Name ']' ]
                  [ 'EXTENDS' Abstract-UnitRef ]
                  [ '=' ( DerivedUnit | ComposedUnit | StructuredUnit )]
                  ';' }.

DerivedUnit = [ DecConst { ( '*' | '/' ) DecConst }
              | 'FUNCTION' Explanation ] '[' UnitRef ']'.

ComposedUnit = '(' UnitRef { ( '*' | '/' ) UnitRef } ')'.

StructuredUnit = '{' UnitRef
                     { ':' UnitRef '[' Min-Dec '..' Max-Dec ']' }
                 '}'
                     [ 'CONTINUOUS' ].

UnitRef = [ Model-Name '.' [ Topic-Name '.' ] ] UnitShort-Name.

MetaDataUseDef = ('SIGN' | 'REFSYSTEM' ) 'BASKET' Basket-Name
                     Properties<FINAL>
                     [ 'EXTENDS' MetaDataUseRef ]
                         '~' Model-Name '.' Topic-Name ';'.

MetaDataUseRef = [ Model-Name '.' [ Topic-Name '.' ] ] Basket-Name.

MetaObjectRef = [ MetaDataUseRef '.' ] Metaobject-Name.

ParameterDef = Parameter-Name Properties<ABSTRACT,EXTENDED,FINAL>
                  ':' ( AttrTypeDef
                      | 'METAOBJECT' [ 'OF' MetaObject-ClassRef ] ) ';'.

RunTimeParameterDef = 'PARAMETER'
                         { RunTimeParameter-Name ':' AttrTypeDef';' }.

ConstraintDef = ( MandatoryConstraint
                | PlausibilityConstraint
                | ExistenceConstraint
                | UniquenessConstraint ).

MandatoryConstraint = 'MANDATORY' 'CONSTRAINT'
                          Logical-Expression ';'.

PlausibilityConstraint = 'CONSTRAINT'
                             ( '<=' | '>=' ) Percentage-Dec '%'
                             Logical-Expression ';'.

ExistenceConstraint = 'EXISTENCE' 'CONSTRAINT'
                           AttributePath 'REQUIRED' 'IN'
                               ViewableRef ':' AttributePath
                               { 'OR' ViewableRef ':' AttributePath } ';'.

UniquenessConstraint =  'UNIQUE' ( GlobalUniqueness
| LocalUniqueness ) ';'.

GlobalUniqueness = UniqueEl.

UniqueEl = ObjectOrAttributePath { ',' ObjectOrAttributePath }.

LocalUniqueness = '(' 'LOCAL' ')'
				StructureAttribute-Name
                        { '->' StructureAttribute-Name } ':'
						Attribute-Name 
			{ ',' Attribute-Name }.

ConstraintsDef = 'CONSTRAINTS' 'OF' ClassOrAssociationRef '='
                     { ConstraintDef }
                 'END' ';'.

Expression = Term.

Term = Term1 { 'OR' Term1 }.

Term1 = Term2 { 'AND' Term2 }.

Term2 = Predicate [ Relation Predicate ].

Predicate = ( Factor
            | [ 'NOT' ] '(' Logical-Expression ')'
            | 'DEFINED' '(' Factor ')' ).

Relation = ( '==' | '!=' | '<>' | '<=' | '>=' | '<' | '>' ).

Factor = ( ObjectOrAttributePath
         | FunctionCall
         | 'PARAMETER' [ Model-Name '.' ] RunTimeParameter-Name
         | Constant ).

ObjectOrAttributePath = PathEl { '->' PathEl }.

AttributePath = ObjectOrAttributePath.

PathEl = ('THIS'
         | 'THISAREA' | 'THATAREA'
         | 'PARENT'
         | ReferenceAttribute-Name
         | AssociationPath
         | Role-Name
         | Base-Name
         | AttributeRef ).

AssociationPath = [ '\' ] AssociationAccess-Name.


AttributeRef = ( Attribute-Name ( [ '[' ( 'FIRST'
                                        | 'LAST'
                                        | AxisListIndex-PosNumber ) ']' ] )
               | 'AGGREGATES' ).

FunctionCall = [ Model-Name '.' ] Function-Name
                   '(' Argument {',' Argument } ')'.

Argument = ( Expression | ViewableRef).

FunctionDef = 'FUNCTION' Function-Name
                 '(' Argument-Name ':' ArgumentType
                 {';' Argument-Name ':' ArgumentType } ')'
                 ':' ArgumentType [ Explanation ] ';'.

ArgumentType = ( AttrTypeDef
               | 'OBJECT' 'OF' (RestrictedClassOrAssRef
                               | RestrictedStructureRef
                               | ViewRef ) ).

ViewDef = 'VIEW' View-Name
            Properties<ABSTRACT,EXTENDED,FINAL,TRANSIENT>
            [ FormationDef | 'EXTENDS' ViewRef ]
{ BaseExtentionDef }
{ Selection }
            '='
            [ ViewAttributes ]
            { ConstraintDef }
          'END' View-Name ';'.

ViewRef = [ Model-Name'.' [ Topic-Name '.' ] ] ( View-Name ).

FormationDef = ( Projection | Join | Union | Aggregation | Inspection ).

Projection = 'PROJECTION' 'OF' RenamedViewableRef ';'.

Join = 'JOIN' 'OF' RenamedViewableRef
           (* ',' RenamedViewableRef
               [ '(' 'OR' 'NULL' ')' ] *) ';'.

Union = 'UNION' 'OF' RenamedViewableRef
            (* ',' RenamedViewableRef *) ';'.

Aggregation = 'AGGREGATION' 'OF' RenamedViewableRef
                  ( 'ALL' | 'EQUAL' '(' UniqueEl ')' ) ';'.

Inspection = [ 'AREA' ] 'INSPECTION' 'OF' RenamedViewableRef
                 '->' StructureAttribute-Name
                     { '->' StructureAttribute-Name } ';'.

RenamedViewableRef = [ Base-Name '~' ] ViewableRef.

ViewableRef = [ Model-Name '.' [ Topic-Name '.' ] ]
              ( Structure-Name
              | Class-Name
              | Association-Name
              | View-Name).

BaseExtentionDef = 'BASE' Base-Name 'EXTENDED' 'BY'
                       RenamedViewableRef { ',' RenamedViewableRef }.

Selection = 'WHERE' Logical-Expression ';'.

ViewAttributes = [ 'ATTRIBUTE' ]
                     { 'ALL' 'OF' Base-Name ';'
                     | AttributeDef
                     | Attribute-Name Properties <ABSTRACT,EXTENDED,FINAL>
                       ':=' Factor ';' }.

GraphicDef = 'GRAPHIC' Graphic-Name Properties<ABSTRACT,FINAL>
                 [ 'EXTENDS' GraphicRef ]
                 [ 'BASED' 'ON' ViewableRef] '='
                 { Selection }
                 { DrawingRule }
             'END' Graphic-Name ';'.

GraphicRef = [ Model-Name '.' [ Topic-Name '.' ] ] Graphic-Name.

DrawingRule = DrawingRule-Name Properties<ABSTRACT,EXTENDED,FINAL>
                    ['OF' Sign-ClassRef ]
                       ':' CondSignParamAssignment
                           { ',' CondSignParamAssignment }';'.

CondSignParamAssignment = ['WHERE' Logical-Expression ]
                '(' SignParamAssignment { ';' SignParamAssignment } ')'.

SignParamAssignment = SignParameter-Name
                        ':=' ( '{' MetaObjectRef '}'
                             | Factor
                             | 'ACCORDING' Enum-AttributePath
                                '(' EnumAssignment {',' EnumAssignment} ')'
                             ).

EnumAssignment = ('{'MetaObjectRef '}'| Constant ) 'WHEN' 'IN' EnumRange.

EnumRange = EnumerationConst [ '..' EnumerationConst ].
